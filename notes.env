// Discogs-App src/components/Detail.js
function Detail({ id, type }) {
  const [data, setData] = useState({});
  const [hasTrackList, setHasTrackList] = useState(false);
  const [hasProfile, setHasProfile] = useState(false);
  console.log("id", id);
  console.log("type", type);

  useEffect((id, type) => {
    const fetchData = async () => {
      const response = await fetch(`https://api.discogs.com/${type}s/${id}`);
      const data = await response.json();
      console.log("data2", data);
      setData(data);
      if ("tracklist" in data) {
        setHasTrackList(true);
      } else if ("profile" in data) {
        setHasProfile(true);
      }
    };
    fetchData();
  }, []);

  const useStyles = makeStyles({
    list: {
      marginTop: 0,
      marginBottom: 0,
    },
  });

  const classes = useStyles();

  return (
    
          <h2>{data.title}</h2>
          <div className={classes.list}>
            {hasTrackList && (
              <div>
                <h4>Tracklist:</h4>
                <ol textAlign="left">
                  {data.tracklist.map((track, index) => (
                    <li key={index}>
                      {" "}
                      {track.title}, {track.duration}{" "}
                    </li>
                  ))}
                </ol>
              </div>
            )}
            {hasProfile && (
              <div>
                <h4>Introduction:</h4>
                <p>{data.profile}</p>
              </div>
            )}
            <h4>{data.uri}</h4>
          </div>
        
export default Detail;

// discogs-browser src/Collection/Collection.js

const userCollection = (props) => {
  const [isLoading, setIsLoading] = React.useState(false)

  const fetchCollection = async () => {
    await setIsLoading(true)
    try {
      const response = await collection.get(`/${allId}/releases`, {
        cancelToken: new CancelToken(function executor(c) {
          // An executor function receives a cancel function as a parameter
          cancel = c
        })
      })
      props.setCollection && await props.setCollection(response.data)
      await setIsLoading(false)
    } catch (error) {
      await console.error(error)
      await setIsLoading(false)
    }
  }

  /**
   * Sets the collection when mounting and cancels
   * any pending promises when unmounting.
   */
  React.useEffect(() => {
    fetchCollection()
    return () => {
      cancel && cancel('Request cancelled by the user.')
    }
  }, [])

  return (
    <Wrapper>
      <Container>
        <Background>
          <ImageWrapper>
            <LazyLoadImage
              alt=''
              src={collectionImage} />
          </ImageWrapper>
          <Title>My <span>collection</span></Title>
        </Background>
        <CollectionReleases isLoading={isLoading} />
      </Container>
    </Wrapper>
  )
}
